// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: api-gateway/pkg/services/pb/services.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// APIGatewayServiceClient is the client API for APIGatewayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIGatewayServiceClient interface {
	// Auth service
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// Query service
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponseArray, error)
	// Command service
	AddCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandResponse, error)
	ModifyCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandResponse, error)
	DeleteCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandResponse, error)
}

type aPIGatewayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIGatewayServiceClient(cc grpc.ClientConnInterface) APIGatewayServiceClient {
	return &aPIGatewayServiceClient{cc}
}

func (c *aPIGatewayServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/services.APIGatewayService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIGatewayServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/services.APIGatewayService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIGatewayServiceClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponseArray, error) {
	out := new(QueryResponseArray)
	err := c.cc.Invoke(ctx, "/services.APIGatewayService/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIGatewayServiceClient) AddCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandResponse, error) {
	out := new(CommandResponse)
	err := c.cc.Invoke(ctx, "/services.APIGatewayService/AddCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIGatewayServiceClient) ModifyCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandResponse, error) {
	out := new(CommandResponse)
	err := c.cc.Invoke(ctx, "/services.APIGatewayService/ModifyCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIGatewayServiceClient) DeleteCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandResponse, error) {
	out := new(CommandResponse)
	err := c.cc.Invoke(ctx, "/services.APIGatewayService/DeleteCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIGatewayServiceServer is the server API for APIGatewayService service.
// All implementations must embed UnimplementedAPIGatewayServiceServer
// for forward compatibility
type APIGatewayServiceServer interface {
	// Auth service
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	// Query service
	Query(context.Context, *QueryRequest) (*QueryResponseArray, error)
	// Command service
	AddCommand(context.Context, *CommandRequest) (*CommandResponse, error)
	ModifyCommand(context.Context, *CommandRequest) (*CommandResponse, error)
	DeleteCommand(context.Context, *CommandRequest) (*CommandResponse, error)
	mustEmbedUnimplementedAPIGatewayServiceServer()
}

// UnimplementedAPIGatewayServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAPIGatewayServiceServer struct {
}

func (UnimplementedAPIGatewayServiceServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAPIGatewayServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAPIGatewayServiceServer) Query(context.Context, *QueryRequest) (*QueryResponseArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedAPIGatewayServiceServer) AddCommand(context.Context, *CommandRequest) (*CommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCommand not implemented")
}
func (UnimplementedAPIGatewayServiceServer) ModifyCommand(context.Context, *CommandRequest) (*CommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyCommand not implemented")
}
func (UnimplementedAPIGatewayServiceServer) DeleteCommand(context.Context, *CommandRequest) (*CommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCommand not implemented")
}
func (UnimplementedAPIGatewayServiceServer) mustEmbedUnimplementedAPIGatewayServiceServer() {}

// UnsafeAPIGatewayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIGatewayServiceServer will
// result in compilation errors.
type UnsafeAPIGatewayServiceServer interface {
	mustEmbedUnimplementedAPIGatewayServiceServer()
}

func RegisterAPIGatewayServiceServer(s grpc.ServiceRegistrar, srv APIGatewayServiceServer) {
	s.RegisterService(&APIGatewayService_ServiceDesc, srv)
}

func _APIGatewayService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIGatewayServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.APIGatewayService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIGatewayServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIGatewayService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIGatewayServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.APIGatewayService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIGatewayServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIGatewayService_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIGatewayServiceServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.APIGatewayService/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIGatewayServiceServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIGatewayService_AddCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIGatewayServiceServer).AddCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.APIGatewayService/AddCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIGatewayServiceServer).AddCommand(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIGatewayService_ModifyCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIGatewayServiceServer).ModifyCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.APIGatewayService/ModifyCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIGatewayServiceServer).ModifyCommand(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIGatewayService_DeleteCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIGatewayServiceServer).DeleteCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.APIGatewayService/DeleteCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIGatewayServiceServer).DeleteCommand(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// APIGatewayService_ServiceDesc is the grpc.ServiceDesc for APIGatewayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var APIGatewayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.APIGatewayService",
	HandlerType: (*APIGatewayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _APIGatewayService_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _APIGatewayService_Login_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _APIGatewayService_Query_Handler,
		},
		{
			MethodName: "AddCommand",
			Handler:    _APIGatewayService_AddCommand_Handler,
		},
		{
			MethodName: "ModifyCommand",
			Handler:    _APIGatewayService_ModifyCommand_Handler,
		},
		{
			MethodName: "DeleteCommand",
			Handler:    _APIGatewayService_DeleteCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api-gateway/pkg/services/pb/services.proto",
}
